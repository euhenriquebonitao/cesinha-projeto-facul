import 'package:challenge_vision/models/project.dart';
import 'package:challenge_vision/services/ai_knowledge_service.dart';
import 'package:challenge_vision/services/conversation_history_service.dart';
import 'package:challenge_vision/services/ai_prompt_service.dart';

/// Exemplos de uso do sistema de IA aprimorado
class AIUsageExamples {
  
  /// Exemplo 1: An√°lise de Riscos
  static Future<void> riskAnalysisExample() async {
    // Dados de exemplo
    final projects = _createSampleProjects();
    
    // Inicializar servi√ßos
    await ConversationHistoryService.init();
    await ConversationHistoryService.startNewSession(
      title: 'An√°lise de Riscos - Exemplo',
      projects: projects,
    );
    
    // Simular pergunta do usu√°rio
    final userQuestion = "Quais projetos est√£o em risco de atraso?";
    
    // Gerar prompt contextualizado
    final conversationContext = ConversationHistoryService.generateConversationContext();
    final prompt = AIPromptService.generateContextualPrompt(
      userQuestion: userQuestion,
      projects: projects,
      conversationHistory: conversationContext,
    );
    
    print("=== EXEMPLO 1: AN√ÅLISE DE RISCOS ===");
    print("Pergunta: $userQuestion");
    print("Prompt gerado: ${prompt.substring(0, 200)}...");
    
    // Simular resposta da IA
    final aiResponse = """
Com base na an√°lise dos seus projetos, identifiquei os seguintes riscos:

üö® PROJETOS EM RISCO CR√çTICO:
1. **Sistema de Gest√£o de Qualidade** - Data cr√≠tica em 15 dias
   - Risco: Atraso na implementa√ß√£o de m√≥dulos cr√≠ticos
   - Mitiga√ß√£o: Alocar recursos adicionais e revisar cronograma

2. **Automa√ß√£o de Processos** - Data cr√≠tica em 20 dias
   - Risco: Depend√™ncias externas n√£o resolvidas
   - Mitiga√ß√£o: Identificar fornecedores alternativos

üìä RECOMENDA√á√ïES GERAIS:
- Implementar revis√µes semanais de progresso
- Estabelecer indicadores de alerta precoce
- Criar planos de conting√™ncia para projetos cr√≠ticos
""";
    
    // Salvar no hist√≥rico
    await ConversationHistoryService.addMessage(
      role: 'user',
      content: userQuestion,
    );
    await ConversationHistoryService.addMessage(
      role: 'bot',
      content: aiResponse,
    );
    
    print("Resposta da IA: $aiResponse");
  }
  
  /// Exemplo 2: Recomenda√ß√µes Estrat√©gicas
  static Future<void> strategicRecommendationsExample() async {
    final projects = _createSampleProjects();
    
    final userQuestion = "Como posso otimizar o portf√≥lio de projetos?";
    
    final prompt = AIPromptService.generateContextualPrompt(
      userQuestion: userQuestion,
      projects: projects,
      conversationHistory: "",
    );
    
    print("\n=== EXEMPLO 2: RECOMENDA√á√ïES ESTRAT√âGICAS ===");
    print("Pergunta: $userQuestion");
    
    final aiResponse = """
üéØ AN√ÅLISE DO PORTF√ìLIO ATUAL:

DISTRIBUI√á√ÉO POR CATEGORIA:
- Inova√ß√£o: 40% (4 projetos) - Excelente para crescimento futuro
- Desenvolvimento: 30% (3 projetos) - Bom equil√≠brio
- Pesquisa: 20% (2 projetos) - Pode ser expandido
- Melhoria: 10% (1 projeto) - Necessita mais aten√ß√£o

üöÄ RECOMENDA√á√ïES ESTRAT√âGICAS:

1. **DIVERSIFICA√á√ÉO TECNOL√ìGICA**
   - Padronizar uso de Flutter para apps internos
   - Investir em capacita√ß√£o em Python para an√°lise de dados
   - Considerar React para dashboards web

2. **BALANCEAMENTO DE RECURSOS**
   - Redistribuir 20% dos recursos de Inova√ß√£o para Melhoria
   - Criar equipe dedicada para projetos de Pesquisa
   - Implementar metodologia √°gil em todos os projetos

3. **OTIMIZA√á√ÉO DE CRONOGRAMAS**
   - Sincronizar projetos relacionados
   - Estabelecer marcos compartilhados
   - Implementar gest√£o de depend√™ncias

4. **M√âTRICAS DE SUCESSO**
   - ROI por categoria de projeto
   - Time-to-market para projetos de Inova√ß√£o
   - Taxa de conclus√£o dentro do prazo
""";
    
    print("Resposta da IA: $aiResponse");
  }
  
  /// Exemplo 3: An√°lise de Tecnologias
  static Future<void> technologyAnalysisExample() async {
    final projects = _createSampleProjects();
    
    final userQuestion = "Quais tecnologias devemos priorizar?";
    
    print("\n=== EXEMPLO 3: AN√ÅLISE DE TECNOLOGIAS ===");
    print("Pergunta: $userQuestion");
    
    final aiResponse = """
üîß AN√ÅLISE TECNOL√ìGICA ATUAL:

TECNOLOGIAS EM USO:
- Flutter: 4 projetos (40%) - Forte presen√ßa
- Python: 3 projetos (30%) - Crescimento consistente
- React: 2 projetos (20%) - Est√°vel
- Java: 1 projeto (10%) - Legado

üìà RECOMENDA√á√ïES DE PRIORIZA√á√ÉO:

1. **FLUTTER - PRIORIDADE ALTA**
   - Vantagens: Desenvolvimento r√°pido, multiplataforma
   - A√ß√£o: Padronizar para todos os apps internos
   - ROI: Alto - reduz tempo de desenvolvimento em 40%

2. **PYTHON - PRIORIDADE ALTA**
   - Vantagens: An√°lise de dados, automa√ß√£o, IA/ML
   - A√ß√£o: Investir em capacita√ß√£o da equipe
   - ROI: M√©dio-Alto - melhora efici√™ncia operacional

3. **REACT - PRIORIDADE M√âDIA**
   - Vantagens: Dashboards web, ferramentas internas
   - A√ß√£o: Manter para projetos web espec√≠ficos
   - ROI: M√©dio - complementa Flutter

4. **JAVA - PRIORIDADE BAIXA**
   - Vantagens: Sistemas legados
   - A√ß√£o: Migra√ß√£o gradual para tecnologias modernas
   - ROI: Baixo - manuten√ß√£o de sistemas antigos

üéØ ESTRAT√âGIA TECNOL√ìGICA:
- Foco em Flutter + Python como stack principal
- React para casos espec√≠ficos de web
- Plano de migra√ß√£o gradual do Java
- Investimento em capacita√ß√£o cont√≠nua
""";
    
    print("Resposta da IA: $aiResponse");
  }
  
  /// Exemplo 4: Insights de Conversa√ß√£o
  static Future<void> conversationInsightsExample() async {
    print("\n=== EXEMPLO 4: INSIGHTS DE CONVERSA√á√ÉO ===");
    
    // Simular v√°rias conversas
    await ConversationHistoryService.init();
    
    // Sess√£o 1
    await ConversationHistoryService.startNewSession(
      title: 'An√°lise de Riscos',
      projects: _createSampleProjects(),
    );
    await ConversationHistoryService.addMessage(role: 'user', content: 'Quais projetos est√£o em risco?');
    await ConversationHistoryService.addMessage(role: 'bot', content: 'Identifiquei 3 projetos em risco...');
    await ConversationHistoryService.endCurrentSession();
    
    // Sess√£o 2
    await ConversationHistoryService.startNewSession(
      title: 'Recomenda√ß√µes Tecnol√≥gicas',
      projects: _createSampleProjects(),
    );
    await ConversationHistoryService.addMessage(role: 'user', content: 'Quais tecnologias priorizar?');
    await ConversationHistoryService.addMessage(role: 'bot', content: 'Recomendo Flutter e Python...');
    await ConversationHistoryService.endCurrentSession();
    
    // Sess√£o 3
    await ConversationHistoryService.startNewSession(
      title: 'Otimiza√ß√£o de Portf√≥lio',
      projects: _createSampleProjects(),
    );
    await ConversationHistoryService.addMessage(role: 'user', content: 'Como otimizar o portf√≥lio?');
    await ConversationHistoryService.addMessage(role: 'bot', content: 'Sugiro rebalancear recursos...');
    await ConversationHistoryService.endCurrentSession();
    
    // Gerar insights
    final insights = ConversationHistoryService.generateConversationInsights();
    
    print("üìä INSIGHTS DE CONVERSA√á√ÉO:");
    print("Total de sess√µes: ${insights['totalSessions']}");
    print("Total de mensagens: ${insights['totalMessages']}");
    print("M√©dia por sess√£o: ${insights['averageSessionLength']}");
    print("N√≠vel de engajamento: ${insights['userEngagement']}");
    
    print("\nüî• T√ìPICOS MAIS DISCUTIDOS:");
    for (final topic in insights['commonTopics']) {
      print("- ${topic['topic']}: ${topic['count']} men√ß√µes");
    }
    
    print("\n‚≠ê PROJETOS MAIS MENCIONADOS:");
    for (final project in insights['mostDiscussedProjects']) {
      print("- Projeto ${project['projectId']}: ${project['mentionCount']} men√ß√µes");
    }
  }
  
  /// Exemplo 5: Uso da Base de Conhecimento
  static void knowledgeBaseExample() {
    print("\n=== EXEMPLO 5: BASE DE CONHECIMENTO ===");
    
    // Obter informa√ß√µes sobre categorias
    final innovationInfo = AIKnowledgeService.getCategoryInfo('Inova√ß√£o');
    print("üìã INFORMA√á√ïES SOBRE INOVA√á√ÉO:");
    print("Descri√ß√£o: ${innovationInfo?['description']}");
    print("Dura√ß√£o t√≠pica: ${innovationInfo?['typical_duration']}");
    print("M√©tricas-chave: ${innovationInfo?['key_metrics'].join(', ')}");
    
    // Obter informa√ß√µes sobre status
    final statusInfo = AIKnowledgeService.getStatusInfo('Em Andamento');
    print("\nüìä INFORMA√á√ïES SOBRE STATUS 'EM ANDAMENTO':");
    print("Descri√ß√£o: ${statusInfo?['description']}");
    print("Pr√≥ximas a√ß√µes: ${statusInfo?['next_actions'].join(', ')}");
    print("Sinais de alerta: ${statusInfo?['warning_signs'].join(', ')}");
    
    // Obter informa√ß√µes sobre tecnologia
    final techInfo = AIKnowledgeService.getTechnologyInfo('Flutter');
    print("\nüîß INFORMA√á√ïES SOBRE FLUTTER:");
    print("Descri√ß√£o: ${techInfo?['description']}");
    print("Casos de uso: ${techInfo?['use_cases'].join(', ')}");
    print("N√≠vel de expertise: ${techInfo?['expertise_level']}");
  }
  
  /// Executar todos os exemplos
  static Future<void> runAllExamples() async {
    print("üöÄ EXECUTANDO EXEMPLOS DO SISTEMA DE IA APRIMORADO\n");
    
    await riskAnalysisExample();
    await strategicRecommendationsExample();
    await technologyAnalysisExample();
    await conversationInsightsExample();
    knowledgeBaseExample();
    
    print("\n‚úÖ TODOS OS EXEMPLOS EXECUTADOS COM SUCESSO!");
  }
  
  /// Criar projetos de exemplo
  static List<Project> _createSampleProjects() {
    return [
      Project(
        id: '1',
        name: 'Sistema de Gest√£o de Qualidade',
        category: 'Inova√ß√£o',
        unit: 'TI',
        status: 'Em Andamento',
        responsibleArea: 'Qualidade',
        responsiblePerson: 'Jo√£o Silva',
        technology: 'Flutter',
        description: 'Sistema para gest√£o de processos de qualidade',
        estimatedCompletionDate: DateTime.now().add(const Duration(days: 30)),
        criticalDate: DateTime.now().add(const Duration(days: 15)),
        rating: 4.5,
        interactions: 25,
        isFavorited: true,
      ),
      Project(
        id: '2',
        name: 'Automa√ß√£o de Processos',
        category: 'Desenvolvimento',
        unit: 'Produ√ß√£o',
        status: 'Em Andamento',
        responsibleArea: 'Opera√ß√µes',
        responsiblePerson: 'Maria Santos',
        technology: 'Python',
        description: 'Automa√ß√£o de processos produtivos',
        estimatedCompletionDate: DateTime.now().add(const Duration(days: 45)),
        criticalDate: DateTime.now().add(const Duration(days: 20)),
        rating: 4.2,
        interactions: 18,
        isFavorited: false,
      ),
      Project(
        id: '3',
        name: 'Dashboard de Analytics',
        category: 'Inova√ß√£o',
        unit: 'TI',
        status: 'Finalizado',
        responsibleArea: 'Business Intelligence',
        responsiblePerson: 'Pedro Costa',
        technology: 'React',
        description: 'Dashboard para an√°lise de dados',
        estimatedCompletionDate: DateTime.now().subtract(const Duration(days: 10)),
        criticalDate: DateTime.now().subtract(const Duration(days: 5)),
        rating: 4.8,
        interactions: 32,
        isFavorited: true,
      ),
      Project(
        id: '4',
        name: 'Pesquisa de Novos Compostos',
        category: 'Pesquisa',
        unit: 'P&D',
        status: 'Em Andamento',
        responsibleArea: 'Pesquisa',
        responsiblePerson: 'Ana Lima',
        technology: 'Python',
        description: 'Pesquisa de novos compostos farmac√™uticos',
        estimatedCompletionDate: DateTime.now().add(const Duration(days: 90)),
        criticalDate: DateTime.now().add(const Duration(days: 60)),
        rating: 4.0,
        interactions: 15,
        isFavorited: false,
      ),
      Project(
        id: '5',
        name: 'Otimiza√ß√£o de Linha de Produ√ß√£o',
        category: 'Melhoria',
        unit: 'Produ√ß√£o',
        status: 'Pendente',
        responsibleArea: 'Opera√ß√µes',
        responsiblePerson: 'Carlos Oliveira',
        technology: 'Java',
        description: 'Otimiza√ß√£o da linha de produ√ß√£o principal',
        estimatedCompletionDate: DateTime.now().add(const Duration(days: 60)),
        criticalDate: DateTime.now().add(const Duration(days: 45)),
        rating: 3.8,
        interactions: 8,
        isFavorited: false,
      ),
    ];
  }
}
